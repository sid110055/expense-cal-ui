{"ast":null,"code":"var _jsxFileName = \"/Users/sandeepvarala/IdeaProjects/expense-cal-ui/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State to hold the groups\n  const [groups, setGroups] = useState([]);\n\n  // State to hold the selected group\n  const [IDselectedGroup, setIDSelectedGroup] = useState('');\n\n  // State to hold the input value for new group name\n  const [ValuenewGroupName, setValueNewGroupName] = useState('');\n\n  // Fetch data from groups.json when the component mounts\n  useEffect(() => {\n    fetch('/data/groups.json').then(response => response.json()).then(data => setGroups(data.Groups)).catch(error => console.error('Error fetching data:', error));\n  }, []);\n\n  // Function to handle form submission for adding a new group\n  const handleAddGroup = event => {\n    event.preventDefault();\n    const newGroup = {\n      id: groups.length + 1,\n      // Generate a new ID for the group\n      name: ValuenewGroupName,\n      person: [] // Initialize persons array for the new group\n    };\n    setGroups([...groups, newGroup]);\n    setValueNewGroupName(''); // Clear the input field after adding the group\n  };\n\n  // Event handler for selecting a group from the dropdown list\n  const handleGroupChange = event => {\n    setIDSelectedGroup(event.target.value);\n  };\n\n  // Event handler for input change in the new group form\n  const handleNewGroupNameChange = event => {\n    setValueNewGroupName(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Group Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleAddGroup,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"ValuenewGroupName\",\n        children: \"New Group Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"ValuenewGroupName\",\n        value: ValuenewGroupName,\n        onChange: handleNewGroupNameChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Group\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Select a Group:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"groups\",\n      value: IDselectedGroup,\n      onChange: handleGroupChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), groups.map(group => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: group.id,\n        children: group.name\n      }, group.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Selected Group:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: IDselectedGroup ? `Selected Group ID: ${IDselectedGroup}` : 'No group selected'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"hyvW4Irn3wAQXvk8uy2Q6y8qtN0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","groups","setGroups","IDselectedGroup","setIDSelectedGroup","ValuenewGroupName","setValueNewGroupName","fetch","then","response","json","data","Groups","catch","error","console","handleAddGroup","event","preventDefault","newGroup","id","length","name","person","handleGroupChange","target","value","handleNewGroupNameChange","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","onChange","map","group","_c","$RefreshReg$"],"sources":["/Users/sandeepvarala/IdeaProjects/expense-cal-ui/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst App = () => {\n    // State to hold the groups\n    const [groups, setGroups] = useState([]);\n\n    // State to hold the selected group\n    const [IDselectedGroup, setIDSelectedGroup] = useState('');\n\n    // State to hold the input value for new group name\n    const [ValuenewGroupName, setValueNewGroupName] = useState('');\n\n    // Fetch data from groups.json when the component mounts\n    useEffect(() => {\n        fetch('/data/groups.json')\n            .then(response => response.json())\n            .then(data => setGroups(data.Groups))\n            .catch(error => console.error('Error fetching data:', error));\n    }, []);\n\n    // Function to handle form submission for adding a new group\n    const handleAddGroup = (event) => {\n        event.preventDefault();\n        const newGroup = {\n            id: groups.length + 1, // Generate a new ID for the group\n            name: ValuenewGroupName,\n            person: [] // Initialize persons array for the new group\n        };\n        setGroups([...groups, newGroup]);\n        setValueNewGroupName(''); // Clear the input field after adding the group\n    };\n\n    // Event handler for selecting a group from the dropdown list\n    const handleGroupChange = (event) => {\n        setIDSelectedGroup(event.target.value);\n    };\n\n    // Event handler for input change in the new group form\n    const handleNewGroupNameChange = (event) => {\n        setValueNewGroupName(event.target.value);\n    };\n\n\n    return (\n        <div className=\"container\">\n            <h1>Group Form</h1>\n            <form onSubmit={handleAddGroup}>\n                <label htmlFor=\"ValuenewGroupName\">New Group Name:</label>\n                <input type=\"text\"\n                       id=\"ValuenewGroupName\"\n                       value={ValuenewGroupName}\n                       onChange={handleNewGroupNameChange}\n                />\n                <button type=\"submit\">Add Group</button>\n\n            </form>\n\n            <h1>Select a Group:</h1>\n            <select id=\"groups\" value={IDselectedGroup} onChange={handleGroupChange}>\n                <option value=\"\">Select...</option>\n                {groups.map(group => (\n                    <option key={group.id} value={group.id}>{group.name}</option>\n                ))}\n            </select>\n\n            <h1>Selected Group:</h1>\n            <p>{IDselectedGroup ? `Selected Group ID: ${IDselectedGroup}` : 'No group selected'}</p>\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}